name: CI/CD Docker en EC2

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ms-imagenes-dyc
  CONTAINER_NAME: ms-imagenes-dyc
  PORT: 8082

jobs:
  build-and-push:
    name: Build & Push a ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configurar Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Login en ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Obtener login Docker para ECR
        run: aws ecr get-login-password \
               | docker login \
                   --username AWS \
                   --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build de la imagen
        run: docker build -t $IMAGE_NAME .

      - name: Etiquetar imagen para ECR
        run: docker tag $IMAGE_NAME:latest \
               ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$IMAGE_NAME:latest

      - name: Push a ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$IMAGE_NAME:latest

  deploy:
    name: Deploy en EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: SSH & desplegar
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Hacer pull de la nueva imagen
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$IMAGE_NAME:latest

            # Detener y eliminar el contenedor anterior si existe
            docker stop $CONTAINER_NAME || true
            docker rm   $CONTAINER_NAME || true

            # Ejecutar el contenedor
            docker run -d \
              --name $CONTAINER_NAME \
              -p $PORT:$PORT \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$IMAGE_NAME:latest
